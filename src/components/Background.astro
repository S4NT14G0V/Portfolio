---
// Este componente no requiere props
---

<style>
  canvas {
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 0;
    filter: blur(100px);
    opacity: 0.6;
    pointer-events: none;
  }
</style>

<canvas id="bg-canvas"></canvas>

<script>
  const canvas = document.getElementById(
    "bg-canvas"
  ) as HTMLCanvasElement;

  if (canvas) {
    const ctx = canvas.getContext("2d");
    if (!ctx) throw new Error("No se pudo obtener el contexto del canvas");

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const balls: Ball[] = [];
    const colors = [
      "rgba(100, 150, 255, 0.35)",
      "rgba(255, 100, 200, 0.3)",
      "rgba(100, 255, 150, 0.3)",
    ];

    class Ball {
      x: number;
      y: number;
      radius: number;
      dx: number;
      dy: number;
      color: string;

      constructor() {
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;
        this.radius = Math.random() * 100 + 200;
        this.dx = Math.random() - 0.5;
        this.dy = Math.random() - 0.5;
        this.color = colors[Math.floor(Math.random() * colors.length)];
      }

      draw(ctx: CanvasRenderingContext2D) {
        ctx.beginPath();
        ctx.fillStyle = this.color;
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fill();
      }

      update(ctx: CanvasRenderingContext2D) {
        this.x += this.dx;
        this.y += this.dy;

        if (this.x + this.radius > canvas.width || this.x - this.radius < 0)
          this.dx *= -1;
        if (this.y + this.radius > canvas.height || this.y - this.radius < 0)
          this.dy *= -1;

        this.draw(ctx);
      }
    }

    for (let i = 0; i < 5; i++) {
      balls.push(new Ball());
    }

    function animate() {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      balls.forEach((ball) => ball.update(ctx));
      requestAnimationFrame(animate);
    }

    animate();

    window.addEventListener("resize", () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  }
</script>
